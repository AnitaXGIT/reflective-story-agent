"""
Export functionality for generated articles
"""

import os
import tempfile
from datetime import datetime
from reportlab.lib.pagesizes import letter, A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib.enums import TA_LEFT, TA_CENTER

class ExportHandler:
    """Handles exporting articles to various formats"""
    
    def __init__(self):
        """Initialize the export handler"""
        self.export_dir = self._get_downloads_folder()
    
    def export_to_txt(self, article_content, theme, audience, word_count, structure_type=None):
        """
        Export article to plain text file
        
        Args:
            article_content (str): The generated article content
            theme (str): Article theme
            audience (str): Target audience
            word_count (int): Target word count
            structure_type (str): Story structure used
            
        Returns:
            str: File path of created text file
        """
        try:
            # Clean the article content (remove markdown formatting if present)
            clean_content = self._clean_content_for_txt(article_content)
            
            # Create filename with timestamp
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"reflective_article_{timestamp}.txt"
            filepath = os.path.join(self.export_dir, filename)
            
            # Create the text file with metadata header
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write("=" * 60 + "\n")
                f.write("REFLECTIVE STORY ARTICLE\n")
                f.write("=" * 60 + "\n\n")
                f.write(f"Generated on: {datetime.now().strftime('%B %d, %Y at %I:%M %p')}\n")
                f.write(f"Theme: {theme}\n")
                f.write(f"Target Audience: {audience}\n")
                if structure_type:
                    f.write(f"Story Structure: {structure_type}\n")
                f.write(f"Target Word Count: {word_count} words\n")
                f.write("\n" + "-" * 60 + "\n\n")
                f.write(clean_content)
                f.write("\n\n" + "-" * 60 + "\n")
                f.write("Generated by Reflective Story Article Generator\n")
            
            return filepath
            
        except Exception as e:
            raise Exception(f"Error creating text file: {str(e)}")
    
    def export_to_pdf(self, article_content, theme, audience, word_count, structure_type=None):
        """
        Export article to PDF file
        
        Args:
            article_content (str): The generated article content
            theme (str): Article theme
            audience (str): Target audience
            word_count (int): Target word count
            structure_type (str): Story structure used
            
        Returns:
            str: File path of created PDF file
        """
        try:
            # Create filename with timestamp
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"reflective_article_{timestamp}.pdf"
            filepath = os.path.join(self.export_dir, filename)
            
            # Create PDF document
            doc = SimpleDocTemplate(filepath, pagesize=letter,
                                  rightMargin=72, leftMargin=72,
                                  topMargin=72, bottomMargin=18)
            
            # Get styles
            styles = getSampleStyleSheet()
            
            # Create custom styles
            title_style = ParagraphStyle(
                'CustomTitle',
                parent=styles['Heading1'],
                fontSize=18,
                spaceAfter=30,
                alignment=TA_CENTER
            )
            
            meta_style = ParagraphStyle(
                'MetaInfo',
                parent=styles['Normal'],
                fontSize=10,
                spaceAfter=6,
                leftIndent=20
            )
            
            body_style = ParagraphStyle(
                'BodyText',
                parent=styles['Normal'],
                fontSize=12,
                spaceAfter=12,
                alignment=TA_LEFT,
                leftIndent=0,
                rightIndent=0,
                firstLineIndent=20
            )
            
            # Build PDF content
            story = []
            
            # Title
            story.append(Paragraph("Reflective Story Article", title_style))
            story.append(Spacer(1, 20))
            
            # Metadata
            story.append(Paragraph(f"<b>Generated on:</b> {datetime.now().strftime('%B %d, %Y at %I:%M %p')}", meta_style))
            story.append(Paragraph(f"<b>Theme:</b> {theme}", meta_style))
            story.append(Paragraph(f"<b>Target Audience:</b> {audience}", meta_style))
            if structure_type:
                story.append(Paragraph(f"<b>Story Structure:</b> {structure_type}", meta_style))
            story.append(Paragraph(f"<b>Target Word Count:</b> {word_count} words", meta_style))
            
            story.append(Spacer(1, 30))
            
            # Article content
            clean_content = self._clean_content_for_pdf(article_content)
            paragraphs = clean_content.split('\n\n')
            
            for para in paragraphs:
                if para.strip():
                    story.append(Paragraph(para.strip(), body_style))
                    story.append(Spacer(1, 12))
            
            # Footer
            story.append(Spacer(1, 30))
            footer_style = ParagraphStyle(
                'Footer',
                parent=styles['Normal'],
                fontSize=9,
                alignment=TA_CENTER
            )
            story.append(Paragraph("Generated by Reflective Story Article Generator", footer_style))
            
            # Build PDF
            doc.build(story)
            
            return filepath
            
        except Exception as e:
            raise Exception(f"Error creating PDF file: {str(e)}")
    
    def _clean_content_for_txt(self, content):
        """
        Clean content for text export (remove markdown, etc.)
        
        Args:
            content (str): Raw content
            
        Returns:
            str: Cleaned content
        """
        # Remove success message if present
        if content.startswith("✅"):
            lines = content.split('\n')
            if len(lines) > 2:
                content = '\n'.join(lines[2:])
        
        # Basic markdown cleanup
        cleaned = content.replace('**', '')  # Remove bold markers
        cleaned = cleaned.replace('*', '')   # Remove italic markers
        cleaned = cleaned.replace('#', '')   # Remove header markers
        
        return cleaned.strip()
    
    def _clean_content_for_pdf(self, content):
        """
        Clean content for PDF export (handle basic formatting)
        
        Args:
            content (str): Raw content
            
        Returns:
            str: Content with basic HTML formatting for PDF
        """
        # Remove success message if present
        if content.startswith("✅"):
            lines = content.split('\n')
            if len(lines) > 2:
                content = '\n'.join(lines[2:])
        
        # Convert basic markdown to HTML for PDF
        cleaned = content.replace('**', '<b>', 1)  # First bold
        cleaned = cleaned.replace('**', '</b>', 1)  # Close bold
        
        return cleaned.strip()
    
    def get_file_size(self, filepath):
        """
        Get file size in human-readable format
        
        Args:
            filepath (str): Path to file
            
        Returns:
            str: File size string
        """
        try:
            size_bytes = os.path.getsize(filepath)
            if size_bytes < 1024:
                return f"{size_bytes} bytes"
            elif size_bytes < 1024 * 1024:
                return f"{size_bytes / 1024:.1f} KB"
            else:
                return f"{size_bytes / (1024 * 1024):.1f} MB"
        except:
            return "Unknown size"
    
    def _get_downloads_folder(self):
        """
        Get the user's Downloads folder path (cross-platform)
        
        Returns:
            str: Path to Downloads folder
        """
        home = os.path.expanduser("~")
        downloads_folder = os.path.join(home, "Downloads")
        
        # Create Downloads folder if it doesn't exist
        if not os.path.exists(downloads_folder):
            try:
                os.makedirs(downloads_folder)
            except:
                # Fallback to temp directory if Downloads can't be created
                return tempfile.gettempdir()
        
        return downloads_folder

# Create global export handler instance
export_handler = ExportHandler()